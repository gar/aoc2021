<!-- livebook:{"persist_outputs":true} -->

# Day 1

## Intro

The input is meant to represent sonar depth readings at points further and further away from a submarine.

<!-- livebook:{"livebook_object":"cell_input","name":"input","type":"textarea","value":"130\n142\n148\n147\n157\n160\n162\n160\n165\n164\n171\n169\n160\n165\n167\n195\n197\n193\n192\n188\n192\n190\n189\n193\n215\n214\n191\n189\n191\n199\n188\n191\n196\n200\n215\n175\n176\n187\n178\n169\n172\n168\n181\n180\n163\n173\n206\n192\n175\n177\n180\n186\n216\n220\n212\n211\n213\n215\n208\n207\n208\n206\n204\n201\n196\n191\n192\n213\n211\n217\n213\n225\n232\n237\n236\n241\n249\n250\n244\n243\n256\n260\n253\n252\n278\n275\n279\n293\n292\n290\n302\n300\n297\n296\n306\n302\n292\n298\n297\n301\n302\n305\n312\n310\n305\n306\n313\n331\n332\n330\n335\n333\n329\n328\n345\n347\n346\n334\n331\n332\n333\n336\n338\n344\n342\n348\n357\n360\n366\n368\n367\n357\n358\n355\n356\n360\n364\n374\n366\n371\n346\n333\n332\n333\n350\n351\n350\n351\n360\n364\n365\n355\n380\n381\n386\n381\n384\n386\n388\n390\n416\n415\n440\n438\n436\n438\n439\n440\n443\n448\n460\n459\n455\n453\n445\n447\n444\n439\n446\n457\n454\n455\n451\n450\n449\n450\n454\n456\n450\n449\n471\n474\n476\n480\n479\n486\n493\n495\n505\n504\n514\n515\n519\n521\n516\n506\n507\n525\n541\n529\n528\n549\n556\n560\n578\n584\n592\n591\n593\n583\n552\n536\n531\n532\n538\n536\n542\n541\n545\n549\n563\n565\n567\n573\n572\n570\n569\n570\n550\n545\n561\n553\n554\n536\n537\n538\n539\n540\n543\n576\n575\n578\n570\n581\n584\n585\n590\n588\n590\n595\n590\n592\n590\n587\n588\n594\n590\n592\n584\n589\n600\n602\n606\n607\n606\n607\n608\n623\n621\n623\n632\n637\n633\n630\n631\n622\n619\n627\n619\n585\n573\n574\n578\n574\n573\n574\n579\n581\n595\n596\n617\n626\n628\n613\n618\n623\n612\n602\n601\n605\n586\n594\n604\n606\n608\n609\n606\n607\n615\n578\n587\n592\n597\n598\n594\n555\n549\n550\n549\n550\n549\n548\n540\n532\n525\n526\n538\n548\n547\n548\n553\n555\n560\n555\n553\n557\n566\n563\n564\n558\n561\n566\n563\n562\n559\n548\n551\n543\n561\n550\n569\n570\n568\n569\n571\n572\n571\n574\n575\n577\n576\n579\n580\n577\n579\n572\n559\n568\n569\n565\n559\n560\n582\n581\n573\n570\n571\n555\n566\n558\n548\n565\n580\n589\n585\n586\n585\n580\n579\n573\n557\n559\n558\n535\n539\n537\n550\n549\n586\n590\n591\n592\n593\n594\n595\n592\n591\n593\n599\n615\n611\n620\n631\n632\n619\n621\n623\n657\n656\n655\n663\n664\n669\n673\n676\n677\n681\n677\n680\n681\n685\n683\n682\n681\n680\n679\n688\n686\n685\n665\n684\n691\n711\n718\n719\n725\n719\n723\n716\n711\n710\n715\n717\n724\n726\n725\n733\n731\n734\n754\n755\n760\n759\n754\n755\n759\n765\n756\n769\n768\n764\n763\n765\n774\n777\n768\n778\n786\n784\n792\n785\n783\n788\n794\n795\n776\n777\n778\n777\n774\n786\n785\n795\n800\n799\n798\n801\n815\n822\n833\n839\n837\n797\n799\n804\n795\n827\n833\n832\n824\n828\n825\n832\n841\n869\n867\n866\n865\n861\n863\n867\n834\n831\n838\n844\n865\n869\n866\n882\n887\n906\n900\n922\n914\n916\n917\n914\n908\n924\n934\n942\n934\n936\n948\n930\n925\n923\n931\n934\n909\n910\n909\n902\n903\n907\n909\n907\n908\n909\n905\n900\n901\n907\n908\n932\n924\n916\n917\n916\n913\n912\n911\n910\n940\n930\n929\n935\n945\n942\n959\n952\n953\n948\n944\n962\n961\n927\n942\n943\n946\n958\n977\n976\n973\n982\n986\n992\n989\n986\n995\n1010\n1023\n1018\n1019\n1015\n1002\n1005\n990\n1000\n967\n970\n985\n986\n988\n1034\n1039\n1034\n1031\n1028\n1029\n1030\n1033\n1014\n1004\n1006\n991\n1003\n1000\n1003\n1005\n994\n996\n995\n996\n1008\n1003\n1004\n1018\n1013\n1004\n999\n984\n974\n975\n973\n974\n978\n979\n992\n994\n1000\n995\n994\n1029\n1020\n1019\n1018\n1017\n1006\n1005\n1009\n977\n999\n996\n978\n997\n998\n999\n1020\n1017\n1018\n1019\n1017\n1026\n1027\n1031\n1032\n1035\n1040\n1038\n1045\n1048\n1052\n1038\n1041\n1040\n1039\n1040\n1039\n1040\n1027\n1031\n1036\n1059\n1047\n1050\n1038\n1036\n1039\n1044\n1047\n1040\n1057\n1049\n1050\n1053\n1051\n1045\n1036\n1035\n1032\n1045\n1034\n1026\n996\n995\n993\n995\n985\n984\n991\n989\n990\n993\n995\n986\n980\n979\n986\n991\n978\n986\n967\n977\n969\n964\n966\n959\n952\n963\n960\n961\n962\n943\n948\n944\n957\n958\n944\n937\n941\n927\n918\n919\n912\n925\n896\n899\n898\n888\n902\n903\n907\n906\n888\n891\n892\n891\n872\n873\n888\n892\n893\n914\n917\n940\n938\n922\n921\n920\n901\n904\n901\n872\n887\n893\n890\n891\n909\n890\n893\n884\n892\n893\n903\n918\n921\n927\n915\n926\n927\n947\n944\n956\n962\n970\n982\n977\n986\n968\n976\n978\n980\n986\n988\n981\n980\n979\n983\n990\n1000\n1002\n1000\n1002\n1003\n1004\n1007\n1005\n1013\n1016\n997\n996\n989\n1023\n1027\n1023\n1010\n1009\n1011\n1012\n994\n993\n1009\n1022\n1024\n1037\n1050\n1059\n1056\n1055\n1054\n1055\n1054\n1053\n1047\n1044\n1046\n1044\n1057\n1059\n1061\n1060\n1063\n1056\n1054\n1053\n1059\n1056\n1051\n1055\n1056\n1050\n1049\n1054\n1070\n1079\n1082\n1081\n1082\n1084\n1081\n1087\n1103\n1077\n1078\n1054\n1056\n1057\n1065\n1067\n1068\n1069\n1086\n1072\n1055\n1060\n1092\n1095\n1096\n1111\n1115\n1111\n1116\n1140\n1154\n1155\n1150\n1162\n1140\n1108\n1111\n1112\n1142\n1128\n1161\n1166\n1159\n1202\n1203\n1204\n1198\n1199\n1205\n1244\n1245\n1271\n1275\n1268\n1275\n1273\n1272\n1300\n1316\n1313\n1326\n1331\n1339\n1342\n1344\n1349\n1339\n1344\n1345\n1352\n1356\n1353\n1356\n1345\n1354\n1356\n1357\n1367\n1368\n1362\n1363\n1376\n1389\n1391\n1374\n1373\n1349\n1348\n1350\n1347\n1348\n1347\n1338\n1340\n1341\n1340\n1344\n1370\n1373\n1371\n1372\n1375\n1391\n1380\n1369\n1371\n1370\n1360\n1342\n1343\n1340\n1339\n1335\n1317\n1310\n1315\n1320\n1346\n1349\n1318\n1331\n1309\n1336\n1345\n1350\n1349\n1347\n1350\n1347\n1346\n1347\n1374\n1373\n1351\n1348\n1345\n1349\n1363\n1365\n1364\n1367\n1371\n1404\n1407\n1408\n1410\n1403\n1410\n1418\n1417\n1416\n1417\n1423\n1427\n1424\n1419\n1410\n1412\n1413\n1381\n1382\n1379\n1382\n1385\n1382\n1383\n1381\n1384\n1393\n1407\n1400\n1397\n1390\n1389\n1367\n1375\n1373\n1372\n1373\n1377\n1381\n1384\n1387\n1384\n1406\n1412\n1414\n1390\n1392\n1390\n1365\n1363\n1365\n1370\n1371\n1373\n1363\n1366\n1379\n1380\n1377\n1375\n1370\n1386\n1383\n1380\n1400\n1401\n1427\n1428\n1401\n1405\n1407\n1398\n1399\n1427\n1429\n1454\n1455\n1459\n1458\n1452\n1440\n1430\n1431\n1424\n1417\n1416\n1421\n1424\n1422\n1430\n1434\n1446\n1467\n1468\n1477\n1478\n1481\n1475\n1462\n1463\n1464\n1454\n1447\n1425\n1440\n1429\n1417\n1431\n1423\n1438\n1412\n1441\n1437\n1448\n1449\n1464\n1458\n1450\n1449\n1456\n1446\n1455\n1456\n1447\n1448\n1442\n1440\n1425\n1424\n1431\n1465\n1462\n1466\n1465\n1447\n1442\n1447\n1423\n1420\n1421\n1419\n1430\n1419\n1416\n1418\n1421\n1415\n1420\n1417\n1418\n1416\n1415\n1419\n1425\n1431\n1434\n1435\n1438\n1441\n1429\n1427\n1428\n1427\n1435\n1438\n1430\n1424\n1425\n1415\n1412\n1415\n1405\n1403\n1404\n1402\n1399\n1405\n1406\n1414\n1425\n1429\n1433\n1393\n1414\n1430\n1435\n1438\n1423\n1424\n1425\n1427\n1428\n1429\n1426\n1427\n1428\n1431\n1428\n1430\n1433\n1421\n1420\n1414\n1421\n1423\n1415\n1416\n1420\n1424\n1435\n1422\n1408\n1401\n1405\n1418\n1412\n1398\n1399\n1433\n1430\n1431\n1430\n1431\n1429\n1425\n1446\n1447\n1434\n1426\n1433\n1434\n1432\n1445\n1443\n1452\n1451\n1443\n1441\n1415\n1416\n1439\n1456\n1460\n1454\n1460\n1477\n1479\n1460\n1488\n1474\n1457\n1459\n1463\n1468\n1465\n1463\n1467\n1479\n1472\n1475\n1474\n1475\n1476\n1477\n1481\n1475\n1481\n1480\n1478\n1448\n1476\n1475\n1476\n1461\n1485\n1484\n1485\n1478\n1477\n1476\n1479\n1475\n1456\n1458\n1465\n1458\n1464\n1461\n1477\n1502\n1482\n1483\n1484\n1485\n1495\n1493\n1511\n1513\n1518\n1530\n1521\n1525\n1528\n1530\n1531\n1533\n1559\n1560\n1566\n1574\n1573\n1557\n1563\n1569\n1561\n1559\n1556\n1560\n1574\n1575\n1578\n1580\n1579\n1576\n1600\n1603\n1567\n1574\n1573\n1569\n1574\n1583\n1582\n1581\n1577\n1582\n1587\n1583\n1576\n1579\n1578\n1584\n1585\n1600\n1590\n1582\n1574\n1570\n1578\n1575\n1572\n1583\n1584\n1569\n1566\n1559\n1534\n1526\n1542\n1539\n1544\n1546\n1539\n1540\n1541\n1566\n1569\n1570\n1573\n1567\n1570\n1571\n1574\n1583\n1579\n1585\n1584\n1581\n1598\n1603\n1607\n1609\n1611\n1612\n1615\n1616\n1623\n1627\n1638\n1637\n1644\n1645\n1646\n1647\n1646\n1653\n1651\n1652\n1666\n1663\n1668\n1666\n1660\n1665\n1661\n1677\n1690\n1691\n1692\n1701\n1702\n1703\n1714\n1710\n1715\n1714\n1713\n1723\n1707\n1708\n1724\n1728\n1748\n1759\n1760\n1758\n1757\n1758\n1760\n1764\n1773\n1753\n1750\n1751\n1758\n1769\n1766\n1751\n1742\n1728\n1733\n1732\n1740\n1742\n1743\n1769\n1750\n1761\n1762\n1764\n1765\n1761\n1765\n1769\n1778\n1779\n1777\n1778\n1759\n1740\n1741\n1742\n1740\n1741\n1740\n1739\n1744\n1758\n1757\n1785\n1788\n1798\n1793\n1799\n1780\n1804\n1807\n1813\n1815\n1804\n1813\n1818\n1819\n1806\n1807\n1808\n1807\n1808\n1810\n1824\n1840\n1847\n1840\n1838\n1841\n1815\n1826\n1832\n1825\n1813\n1809\n1826\n1835\n1834\n1830\n1831\n1841\n1838\n1819\n1824\n1815\n1808\n1812\n1811\n1812\n1813\n1793\n1792\n1794\n1787\n1779\n1770\n1761\n1759\n1768\n1769\n1768\n1767\n1766\n1765\n1766\n1779\n1775\n1771\n1765\n1767\n1772\n1770\n1775\n1776\n1783\n1773\n1767\n1771\n1775\n1778\n1781\n1803\n1802\n1803\n1804\n1791\n1794\n1774\n1762\n1764\n1793\n1792\n1798\n1796\n1801\n1809\n1818\n1820\n1822\n1818\n1804\n1803\n1821\n1822\n1820\n1822\n1815\n1816\n1809\n1810\n1833\n1845\n1815\n1824\n1823\n1806\n1808\n1813\n1804\n1805\n1797\n1798\n1800\n1791\n1790\n1789\n1783\n1785\n1786\n1790\n1780\n1786\n1814\n1815\n1816\n1818\n1807\n1785\n1789\n1790\n1780\n1791\n1792\n1793\n1794\n1813\n1800\n1795\n1809\n1810\n1813\n1791\n1793\n1792\n1790\n1792\n1795\n1816\n1835\n1851\n1856\n1855\n1856\n1869\n1868\n1872\n1876\n1872\n1866\n1865\n1868\n1871\n1860\n1862\n1860\n1862\n1863\n1876\n1884\n1890\n1893\n1892\n1891\n1892\n1891\n1893\n1900\n1901\n1915\n1926\n1921\n1928\n1905\n1906\n1894\n1890\n1884\n1885\n1880\n1883\n1887\n1882\n1881\n1882\n1885\n1884\n1883\n1889\n1897\n1902\n1906\n1911\n1893\n1898\n1897\n1885\n1891\n1892\n1882\n1903\n1906\n1911\n1905\n1885\n1886\n1880\n1884\n1860\n1868\n1876\n1877\n1870\n1877\n1895\n1896\n1897\n1900\n1905\n1910\n1902\n1894\n1895\n1892\n1897\n1893\n1890\n1891\n1883\n1884\n1867\n1866\n1857\n1839\n1835\n1836\n1833\n1846\n1849\n1860\n1861\n1858\n1856\n1857\n1870\n1858\n1862\n1881\n1882\n1883\n1887\n1865\n1864\n1854\n1855\n1858\n1871\n1869\n1856\n1857\n1862\n1868\n1870\n1868\n1873\n1854\n1850\n1849\n1848\n1849\n1858\n1861\n1862\n1868\n1866\n1878\n1879\n1878\n1879\n1887\n1886\n1891\n1886\n1888\n1890\n1889\n1885\n1921\n1929\n1923\n1925\n1922\n1923\n1922\n1926\n1936\n1948\n1943\n1945\n1946\n1948\n1947\n1956\n1963\n1979\n1985\n1987\n1974\n1976\n1966\n1968\n1936\n1929\n1927\n1921\n1938\n1919\n1920\n1909\n1908\n1920\n1910\n1892\n1895\n1908\n1911\n1916\n1922\n1923\n1938\n1941\n1937\n1952\n1955\n1966\n1960\n1961\n1983\n1953\n1960\n1961\n1959\n1917\n1918\n1911\n1915\n1939\n1941\n1938\n1917\n1928\n1930\n1924\n1922\n1921\n1925\n1924\n1923\n1927\n1913\n1926\n1945\n1954\n1944\n1918\n1922\n1914\n1915\n1916\n1917\n1882\n1873\n1857\n1856\n1852\n1858\n1860\n1874\n1864\n1865\n1867\n1872\n1880\n1879\n1887\n1890\n1874\n1875\n1877\n1895\n1917\n1909\n1941\n1963\n1969\n1971\n1988\n1989\n1985\n1986\n1979\n1985\n1986\n1988\n1997\n1994\n2000\n2002\n2005\n1999\n1996\n1995\n2014\n2009\n1994\n1983\n1995\n1994\n1998\n2001\n1996\n2015\n2003\n1998\n2012\n2013\n2000\n1997\n1999\n2003\n2006\n2008\n2011\n1992\n1989\n1988\n1989\n1976\n1978\n1998\n2003\n2001\n2004\n2001\n1983\n1984\n1983\n1985\n1986\n1983\n1981\n1980\n1993\n1998\n1991\n1998\n2019\n2010\n2009\n2035\n2032\n2031\n2022\n2019\n2020\n2022\n2021\n2018\n2019\n2020\n2029\n2028\n2030\n2033\n2038\n2031\n2037\n2075\n2064\n2048\n2049\n2061\n2060\n2061\n2059\n2061\n2068\n2088\n2097"} -->

And here's our test input.

<!-- livebook:{"livebook_object":"cell_input","name":"test input","type":"textarea","value":"199\n200\n208\n210\n200\n207\n240\n269\n260\n263"} -->

Accessing those readings as a list (or stream) of integers would be useful, so let's create a module to help with that.

```elixir
defmodule Input do
  def convert_lines(prompt, converter) do
    Stream.repeatedly(fn -> IO.gets(prompt) end)
    |> Stream.take_while(&(&1 != :eof))
    |> Stream.map(&String.trim/1)
    |> Stream.map(converter)
  end

  def as_ints(prompt) do
    prompt
    |> convert_lines(&String.to_integer/1)
  end
end
```

```output
{:module, Input, <<70, 79, 82, 49, 0, 0, 8, ...>>, {:as_ints, 1}}
```

## Part 1

Our goal for part 1 is to find out how many times the depth readings increased, compared to the previous reading.

<!-- livebook:{"break_markdown":true} -->

One way to accomplish this is to chunk these numbers as "pair chains", i.e. pair the first with the second, the second with the third, the third with the fourth, and so on. Then we can simple count how many of these "pair chains" have a second element greater than the first element.

```elixir
defmodule Chunker do
  def pair_chains(enum) do
    enum
    |> Enum.chunk_while([], &pair_chainer/2, &discard_trailing_elements/1)
  end

  defp pair_chainer(el, acc) do
    if Enum.empty?(acc) do
      # start new, incomplete pair
      {:cont, [el]}
    else
      # emit a pair, and start a new, incomplete pair
      {:cont, acc ++ [el], [el]}
    end
  end

  defp discard_trailing_elements(_acc), do: {:cont, []}
end

pair_chainer = fn el, acc ->
  if Enum.empty?(acc) do
    {:cont, [el]}
  else
    # emit a pair, and start a new, incomplete pair
    {:cont, acc ++ [el], [el]}
  end
end

pair_chains = Chunker.pair_chains([1, 2, 4, 3, 8])
```

```output
[[1, 2], [2, 4], [4, 3], [3, 8]]
```

```elixir
Enum.count(pair_chains, fn [a, b] -> b > a end)
```

```output
3
```

So now we can define a solution for part 1!

```elixir
defmodule Day1 do
  def part_1(input_name) do
    input_name
    |> Input.as_ints()
    |> Chunker.pair_chains()
    |> Enum.count(&increasing?/1)
  end

  defp increasing?([a, b]), do: b > a
end
```

```output
{:module, Day1, <<70, 79, 82, 49, 0, 0, 7, ...>>, {:increasing?, 1}}
```

The answer should be 7, so lets make sure that's the case:

```elixir
Day1.part_1("test input") == 7
```

```output
true
```

Success!

Now we can find the answer to our real input.

```elixir
Day1.part_1("input")
```

```output
1167
```

## Part 2

In part 1, we had to compare "pair chains". In part 2, we need to compare "triple chains", i.e. group the first measurement with the second and third, group the second with the third and fourth, etc.

<!-- livebook:{"break_markdown":true} -->

To do that, I'll make a generic chainer function which can emit chunks of arbitrary length.

```elixir
defmodule Chunker do
  def pair_chains(enum), do: chunk_chains(enum, 2)

  def triple_chains(enum), do: chunk_chains(enum, 3)

  def chunk_chains(enum, size) do
    Enum.chunk_while(enum, [], chainer(size), &discard_trailing_elements/1)
  end

  defp chainer(n) do
    fn el, chunk ->
      if length(chunk) == n do
        # emit a chunk, and create new chunk
        {:cont, chunk, tl(chunk) ++ [el]}
      else
        # append to the chunk we're currently building
        {:cont, chunk ++ [el]}
      end
    end
  end

  defp discard_trailing_elements(acc), do: {:cont, acc, []}
end
```

```output
{:module, Chunker, <<70, 79, 82, 49, 0, 0, 9, ...>>, {:discard_trailing_elements, 1}}
```

We don't want to compare the numbers within the triple chains, we want to sum the nubmers within a chain and compare that to the previous chain. That means that after we sum the triple chains, we need to create pair chains to do the comparison!

```elixir
defmodule Day1 do
  def part_1(input_name) do
    input_name
    |> Input.as_ints()
    |> Chunker.pair_chains()
    |> Enum.count(&increasing?/1)
  end

  def part_2(input_name) do
    input_name
    |> Input.as_ints()
    |> Chunker.triple_chains()
    |> Stream.map(&Enum.sum/1)
    |> Chunker.pair_chains()
    |> Enum.count(&increasing?/1)
  end

  defp increasing?([a, b]), do: b > a
end
```

```output
{:module, Day1, <<70, 79, 82, 49, 0, 0, 8, ...>>, {:increasing?, 1}}
```

Let's test that with the test input. The answer should be 5.

```elixir
Day1.part_2("test input") == 5
```

```output
true
```

Nice! So now we can get the answer for the second part of the puzzle.

```elixir
Day1.part_2("input")
```

```output
1130
```
